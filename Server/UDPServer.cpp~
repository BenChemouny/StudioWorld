/*
 * student name: Nadav Schweitzer
 * exercise name: ex4
 * file description: UDPServer class
 */
#include "UDPServer.h"
#include "Recv.h"
#include <iostream>
using namespace std;

/*
* this is the constructor of the udpServer class
* @param port: the port that the server will listen to
*/
UDPServer::UDPServer(int port)
{
	this->sock = socket(AF_INET, SOCK_DGRAM, 0);
	if(this->sock < 0)
	{
		perror("error creating socket");
	}
	memset(&sin, 0, sizeof(sin));
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;
	sin.sin_port = htons(port);

	if(bind(sock,(struct sockaddr*)&sin, sizeof(sin))<0)
	{
		perror("error binding to socket");
	}
}
/*
* this function recive the message from the client and return it
* @return: the message
*/
std::string UDPServer::RecvMSG()
{
	unsigned int from_len = sizeof(struct sockaddr_in);
	char buffer[4096];
	memset(&buffer, 0, sizeof(buffer));
	int bytes = recvfrom(sock, buffer, sizeof(buffer), 0, (struct sockaddr*)&sin, &from_len);
	if(bytes < 0)
	{
		perror("error reading from socket");
	}
	return buffer;
}
/*
* this function send a message to the client
* @param DATA: the message to send
* @param length: the length of the message
*/
void UDPServer::sendAnswer(std::string DATA, int length)
{
	int sent_bytes = sendto(sock, DATA.data(), length, 0, (struct sockaddr *)&sin, sizeof(sin));
	if(sent_bytes < 0)
	{
		perror("error writing to socket");
	}
}
/*
* the destructor of the class, close the socket
*/
UDPServer::~UDPServer()
{
	close(sock);
}
